// Code generated by mockery v2.24.0. DO NOT EDIT.

package platform

import (
	context "context"

	internalplatform "github.com/sembh1998/go-hexagonal-neo4j-api/internal/platform"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *ProductRepository) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ProductRepository) FindAll(ctx context.Context) ([]*internalplatform.Product, error) {
	ret := _m.Called(ctx)

	var r0 []*internalplatform.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*internalplatform.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*internalplatform.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internalplatform.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ProductRepository) FindByID(ctx context.Context, id string) (*internalplatform.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *internalplatform.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*internalplatform.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *internalplatform.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalplatform.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, product
func (_m *ProductRepository) Save(ctx context.Context, product *internalplatform.Product) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *internalplatform.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByID provides a mock function with given fields: ctx, id, product
func (_m *ProductRepository) UpdateByID(ctx context.Context, id string, product *internalplatform.Product) error {
	ret := _m.Called(ctx, id, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *internalplatform.Product) error); ok {
		r0 = rf(ctx, id, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
